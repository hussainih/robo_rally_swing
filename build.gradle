buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id "org.sonarqube" version "2.2.1"
}

version '0.1'

// plugins needed for development and deployment
apply plugin: 'java'
apply plugin: 'war'
// plugins to support an IDE
apply plugin: 'idea'
// plugins to support quality assurance
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'


repositories {

    mavenLocal()
    jcenter()
    mavenCentral()

}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile "com.google.code.gson:gson:2.8.0"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "com.jfoenix:jfoenix:1.3.0"


//    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.4.RELEASE'
//    compile group: 'org.springframework', name: 'spring-web', version: '3.0.5.RELEASE'
//    compile group: 'org.springframework.boot', name: 'spring-boot', version: '1.5.3.RELEASE'

    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
//    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
//    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

}



version '0.1'


if (!project.hasProperty("sonarBranch")) {
    ext.sonarBranch = "unknown"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarqube.com"
        property "sonar.login", "056382d11413784f17c358f81ddc96c0dee7c946"
        property "sonar.organization", "darlings"
        property "sonar.analysis.mode", "publish"
        property "sonar.sourceEncoding", "UTF-8"
    }
}
test {
    jacoco{
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")

    }
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}